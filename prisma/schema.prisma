// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(uuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  languages     Language[]
  vocabularies  Vocabulary[]
  words         Word[]
  informals     Informal[]
  slangs        Slang[]
  sentences     Sentence[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Language {
  id           String       @id @default(uuid())
  userId       String
  slug         String       @unique
  name         String
  description  String?
  isActive     Boolean      @default(true)
  isDelete     Boolean      @default(false)
  cuid         String
  cat          DateTime     @default(now())
  muid         String?
  mat          DateTime     @updatedAt
  vocabularies Vocabulary[]
  words        Word[]
  informals    Informal[]
  slangs       Slang[]
  sentences    Sentence[]

  user User @relation(fields: [userId], references: [id])
}

model Vocabulary {
  id         String   @id @default(uuid())
  userId     String
  languageId String
  slug       String   @unique
  name       String
  alphabet   String?
  translate  String
  link       String?
  isActive   Boolean  @default(true)
  isDelete   Boolean  @default(false)
  cuid       String
  cat        DateTime @default(now())
  muid       String?
  mat        DateTime @updatedAt

  user     User     @relation(fields: [userId], references: [id])
  language Language @relation(fields: [languageId], references: [id])
}

model Word {
  id         String   @id @default(uuid())
  userId     String
  languageId String
  slug       String   @unique
  name       String
  alphabet   String?
  translate  String
  link       String?
  isActive   Boolean  @default(true)
  isDelete   Boolean  @default(false)
  cuid       String
  cat        DateTime @default(now())
  muid       String?
  mat        DateTime @updatedAt

  user     User     @relation(fields: [userId], references: [id])
  language Language @relation(fields: [languageId], references: [id])
}

model Informal {
  id         String   @id @default(uuid())
  userId     String
  languageId String
  slug       String   @unique
  name       String
  alphabet   String?
  translate  String
  link       String?
  isActive   Boolean  @default(true)
  isDelete   Boolean  @default(false)
  cuid       String
  cat        DateTime @default(now())
  muid       String?
  mat        DateTime @updatedAt

  user     User     @relation(fields: [userId], references: [id])
  language Language @relation(fields: [languageId], references: [id])
}

model Slang {
  id         String   @id @default(uuid())
  userId     String
  languageId String
  slug       String   @unique
  name       String
  alphabet   String?
  translate  String
  link       String?
  isActive   Boolean  @default(true)
  isDelete   Boolean  @default(false)
  cuid       String
  cat        DateTime @default(now())
  muid       String?
  mat        DateTime @updatedAt

  user     User     @relation(fields: [userId], references: [id])
  language Language @relation(fields: [languageId], references: [id])
}

model Sentence {
  id         String   @id @default(uuid())
  userId     String
  languageId String
  slug       String   @unique
  name       String
  alphabet   String?
  translate  String
  link       String?
  isActive   Boolean  @default(true)
  isDelete   Boolean  @default(false)
  cuid       String
  cat        DateTime @default(now())
  muid       String?
  mat        DateTime @updatedAt

  user     User     @relation(fields: [userId], references: [id])
  language Language @relation(fields: [languageId], references: [id])
}
